name: Diagnose FTP + Slack + Email

on:
  workflow_dispatch:

jobs:
  diag:
    runs-on: ubuntu-latest
    steps:
      - name: ‚úÖ Confirm repo checkout
        uses: actions/checkout@v4

      ####################################################################
      # SLACK ‚Äî webhook reachability + response
      ####################################################################
      - name: üîé Slack ‚Äî check secret present
        run: |
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "‚ùå Missing secret: SLACK_WEBHOOK_URL"; exit 1
          else
            echo "‚úÖ SLACK_WEBHOOK_URL present"
          fi

      - name: üåê Slack ‚Äî DNS check
        run: nslookup hooks.slack.com || true

      - name: üîî Slack ‚Äî test ping
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          payload=$(cat <<'JSON'
          { "text": "üîî *MurMax Express¬Æ ‚Äî Slack diagnostic ping*", "blocks": [
              { "type": "section", "text": { "type": "mrkdwn", "text": "*MurMax Express¬Æ ‚Äî Slack diagnostic ping*" } },
              { "type": "section", "fields": [
                { "type": "mrkdwn", "text": "*Repo:* ${{ github.repository }}" },
                { "type": "mrkdwn", "text": "*Run:*  ${{ github.run_id }}" },
                { "type": "mrkdwn", "text": "*Branch:*  ${{ github.ref_name }}" }
              ]}
          ] }
          JSON
          )
          code=$(curl -sS -o /tmp/slack.out -w "%{http_code}" -X POST -H 'Content-Type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL")
          echo "Slack HTTP: $code"
          echo "--- Slack body ---"; cat /tmp/slack.out || true
          test "$code" = "200"

      ####################################################################
      # EMAIL ‚Äî SMTP connectivity + send
      ####################################################################
      - name: üîé Email ‚Äî check SMTP/MAIL secrets
        run: |
          missing=false
          for key in SMTP_SERVER SMTP_PORT SMTP_USERNAME SMTP_PASSWORD MAIL_TO MAIL_FROM; do
            if [ -z "${{ secrets[key] || '' }}" ]; then echo "‚ùå Missing: $key"; missing=true; else echo "‚úÖ $key present"; fi
          done
          if [ "$missing" = true ]; then
            echo "‚ö†Ô∏è Email test will likely fail due to missing secrets"; exit 1
          fi
      - name: üåê Email ‚Äî DNS check (SMTP server)
        run: nslookup ${{ secrets.SMTP_SERVER }} || true

      - name: üìß Email ‚Äî test send (handles 465 vs 587)
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: ${{ secrets.SMTP_PORT == '465' }}
          subject: "üìß MurMax Express¬Æ ‚Äî SMTP diagnostic"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          html_body: |
            <h3>MurMax Express¬Æ ‚Äî SMTP Diagnostic</h3>
            <p>Workflow: ${{ github.workflow }} ‚Ä¢ Run: ${{ github.run_id }}</p>
            <p>If you received this, SMTP settings are good.</p>

      ####################################################################
      # FTP ‚Äî server/dir/path/protocol validation (no file writes)
      ####################################################################
      - name: üîé FTP ‚Äî check secrets present
        run: |
          for key in FTP_SERVER FTP_USERNAME FTP_PASSWORD; do
            if [ -z "${{ secrets[key] || '' }}" ]; then echo "‚ùå Missing: $key"; exit 1; else echo "‚úÖ $key present"; fi
          done

      - name: üåê FTP ‚Äî DNS check
        run: nslookup ${{ secrets.FTP_SERVER }} || true

      # Explicit FTPS (TLS on port 21)
      - name: üì§ FTP ‚Äî list (FTPS explicit 21)
        id: ftps_explicit
        continue-on-error: true
        env:
          HOST: ${{ secrets.FTP_SERVER }}
          USER: ${{ secrets.FTP_USERNAME }}
          PASS: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "Trying FTPS explicit (port 21) list of /public_html/appmurmaxexpress.com/"
          curl -sS --disable-epsv --ftp-ssl-reqd --user "$USER:$PASS" \
            "ftp://$HOST:21/public_html/appmurmaxexpress.com/" --list-only

      # Implicit FTPS (TLS on port 990)
      - name: üì§ FTP ‚Äî list (FTPS implicit 990)
        id: ftps_implicit
        if: ${{ steps.ftps_explicit.outcome == 'failure' }}
        continue-on-error: true
        env:
          HOST: ${{ secrets.FTP_SERVER }}
          USER: ${{ secrets.FTP_USERNAME }}
          PASS: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "Trying FTPS implicit (port 990) list of /public_html/appmurmaxexpress.com/"
          curl -sS --disable-epsv --user "$USER:$PASS" \
            "ftps://$HOST:990/public_html/appmurmaxexpress.com/" --list-only

      # Plain FTP (diagnostic only)
      - name: üì§ FTP ‚Äî list (FTP plain 21)
        id: ftp_plain
        if: ${{ steps.ftps_explicit.outcome == 'failure' && steps.ftps_implicit.outcome == 'failure' }}
        continue-on-error: true
        env:
          HOST: ${{ secrets.FTP_SERVER }}
          USER: ${{ secrets.FTP_USERNAME }}
          PASS: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "Trying plain FTP (port 21) list of /public_html/appmurmaxexpress.com/ (diagnostic)"
          curl -sS --disable-epsv --user "$USER:$PASS" \
            "ftp://$HOST:21/public_html/appmurmaxexpress.com/" --list-only

      - name: ‚úÖ FTP ‚Äî final verdict
        run: |
          echo "Explicit FTPS outcome:  ${{ steps.ftps_explicit.outcome }}"
          echo "Implicit FTPS outcome:  ${{ steps.ftps_implicit.outcome }}"
          echo "Plain FTP outcome:      ${{ steps.ftp_plain.outcome }}"
          if [ "${{ steps.ftps_explicit.outcome }}" = "failure" ] && \
             [ "${{ steps.ftps_implicit.outcome }}" = "failure" ] && \
             [ "${{ steps.ftp_plain.outcome }}" = "failure" ]; then
            echo "‚ùå All FTP list attempts failed. Likely protocol/port, credentials, or path issue."; exit 1
          else
            echo "‚úÖ At least one FTP listing method worked."
          fi
