name: Build & Deploy to cPanel (FTPS)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SMTP_PORT: ${{ secrets.SMTP_PORT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci || npm i

      - name: Build project
        run: npm run build

      - name: Ensure status.html exists in dist
        run: |
          mkdir -p dist
          cat > dist/status.html <<'HTML'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>MurMax Express¬Æ ‚Äî Deployment Status</title>
          </head>
          <body>
            <h1>MurMax Express¬Æ ‚Äî Deployment Status</h1>
            <p><b>Domain:</b> appmurmaxexpress.com</p>
            <p><b>Build Timestamp:</b> AUTO_TIMESTAMP_UTC</p>
            <p><b>Commit:</b> GITHUB_SHA_HERE</p>
            <p><b>Status:</b> LIVE</p>
          </body>
          </html>
          HTML

      - name: Inject timestamp and commit SHA
        working-directory: dist
        run: |
          ts=$(date -u +"%Y-%m-%d %H:%M:%SZ (UTC)")
          sed -i "s/AUTO_TIMESTAMP_UTC/${ts}/g" status.html
          short_sha=$(echo "${GITHUB_SHA}" | cut -c1-7)
          sed -i "s/GITHUB_SHA_HERE/${short_sha}/g" status.html

      - name: Ensure robots.txt and 404.html exist in dist
        run: |
          mkdir -p dist
          echo "User-agent: *" > dist/robots.txt
          echo "Allow: /" >> dist/robots.txt
          echo "Sitemap: https://appmurmaxexpress.com/sitemap.xml" >> dist/robots.txt
          echo "<!doctype html><h1>404 Not Found</h1>" > dist/404.html

      # === Set server-dir paths ===
      - name: Set server-dir paths
        id: paths
        run: |
          echo "SERVER_DIR=/public_html/appmurmaxexpress.com/" >> $GITHUB_OUTPUT
          echo "ALT_SERVER_DIR=/appmurmaxexpress.com/" >> $GITHUB_OUTPUT

      # === Multi-strategy FTP deploy ===
      - name: üì§ Deploy FTPS (21) ‚Äî hostname
        id: deploy_ftps_host
        continue-on-error: true
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: ./dist/
          server-dir: ${{ steps.paths.outputs.SERVER_DIR }}

      - name: üì§ Deploy FTPS (21) ‚Äî IP
        if: ${{ steps.deploy_ftps_host.outcome == 'failure' }}
        continue-on-error: true
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER_IP }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: ./dist/
          server-dir: ${{ steps.paths.outputs.SERVER_DIR }}

      # === Network Debug + Health Checks ===
      - name: üîé Network debug
        run: |
          echo "Runner public IP:" && curl -s https://ifconfig.me || true
          nslookup appmurmaxexpress.com || true
          dig +short appmurmaxexpress.com || true
          curl -I -L --max-time 20 https://appmurmaxexpress.com/status.html || true

      - name: üåê Post-deploy health check (status.html)
        run: |
          set -e
          ip=$(dig +short appmurmaxexpress.com | tail -n1)
          url="https://appmurmaxexpress.com/status.html?cb=$(date +%s)"
          http_code=$(curl -L --retry 5 --retry-delay 3 --max-time 25 \
                      --resolve appmurmaxexpress.com:443:$ip \
                      -sS -o /tmp/status.html -w "%{http_code}" "$url")
          echo "HTTP $http_code"
          if [ "$http_code" != "200" ]; then
            echo "‚ùå status.html not reachable"; exit 1; fi
          echo "‚úÖ status.html reachable"

      - name: ü§ñ Post-deploy robots.txt check
        run: |
          ip=$(dig +short appmurmaxexpress.com | tail -n1)
          url="https://appmurmaxexpress.com/robots.txt?cb=$(date +%s)"
          code=$(curl -L --retry 5 --retry-delay 3 --max-time 25 \
                 --resolve appmurmaxexpress.com:443:$ip \
                 -sS -o /tmp/robots.txt -w "%{http_code}" "$url")
          echo "HTTP $code"
          [ "$code" = "200" ] || { echo "‚ùå robots.txt not reachable"; exit 1; }
          echo "‚úÖ robots.txt reachable"

      # === Slack notifications ===
      - name: üîî Slack ‚Äî success
        if: ${{ success() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          [ -z "$SLACK_WEBHOOK_URL" ] && echo "No Slack webhook" && exit 0
          payload=$(cat <<'JSON'
          { "text": "‚úÖ *MurMax Express¬Æ Deployed Successfully*" }
          JSON
          )
          curl -sS -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"

      - name: üîî Slack ‚Äî failure
        if: ${{ failure() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          [ -z "$SLACK_WEBHOOK_URL" ] && exit 0
          payload=$(cat <<'JSON'
          { "text": "‚ùå *MurMax Express¬Æ Deployment Failed* - check logs." }
          JSON
          )
          curl -sS -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"

      # === Email notifications (fixed env check) ===
      - name: üìß Email ‚Äî success (SSL 465)
        if: ${{ success() && env.SMTP_PORT == '465' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: true
          subject: ‚úÖ MurMax Express¬Æ Deployed ‚Äî appmurmaxexpress.com
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          html_body: "<h2>MurMax Express¬Æ ‚Äî Deployment Success</h2><p>All checks passed.</p>"

      - name: üìß Email ‚Äî success (STARTTLS 587)
        if: ${{ success() && env.SMTP_PORT == '587' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: false
          subject: ‚úÖ MurMax Express¬Æ Deployed ‚Äî appmurmaxexpress.com
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          html_body: "<h2>MurMax Express¬Æ ‚Äî Deployment Success</h2><p>All checks passed.</p>"

      - name: üìß Email ‚Äî failure (any port)
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: ${{ env.SMTP_PORT == '465' }}
          subject: ‚ùå MurMax Express¬Æ Deployment Failed
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          html_body: "<h2>Deployment failed</h2><p>See logs for details.</p>"
